Prototype and Registry Design Patterns
Prototype Pattern
The Prototype Pattern is a creational design pattern that allows objects to be created by copying an existing object (a prototype) instead of constructing a new one from scratch.

Concept: Instead of creating a new object from a class, clone an existing object.
Implementation: Uses a clone() method to create copies.
Use Cases:
When object creation is expensive.
When objects have many configurations.
When subclassing is impractical.
Example in Java:
java
Copy
Edit
class Prototype implements Cloneable {
    String data;

    public Prototype(String data) {
        this.data = data;
    }

    @Override
    protected Prototype clone() {
        return new Prototype(this.data);
    }
}
Registry Pattern
The Registry Pattern is a structural pattern used to manage and access shared instances of objects efficiently.

Concept: A centralized storage (registry) maintains object instances for global access.
Implementation: Uses a Map to store and retrieve objects.
Use Cases:
When multiple parts of a system need access to shared objects.
When managing singleton or frequently used instances.
Example in Java:
java
Copy
Edit
import java.util.HashMap;
import java.util.Map;

class Registry {
    private static final Map<String, Prototype> registry = new HashMap<>();

    public static void register(String key, Prototype prototype) {
        registry.put(key, prototype);
    }

    public static Prototype get(String key) {
        return registry.get(key).clone(); // Return a cloned object
    }
}
Combination of Both:

The Prototype Pattern is often used with the Registry Pattern to store pre-configured prototypes and retrieve clones when needed.
This helps in creating objects efficiently while maintaining centralized management.